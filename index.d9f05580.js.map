{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ class $a5fd07fa01589658$var$Game {\n    static STATUS = {\n        idle: \"idle\",\n        playing: \"playing\",\n        win: \"win\",\n        lose: \"lose\"\n    };\n    constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        this.score = 0;\n        this.status = $a5fd07fa01589658$var$Game.STATUS;\n        this.initialState = initialState;\n        this.state = initialState.map((row)=>[\n                ...row\n            ]);\n    }\n    moveLeft() {\n        if (this.getStatus() !== $a5fd07fa01589658$var$Game.STATUS.playing) return;\n        let canMove = false;\n        const newState = this.state.map((row)=>{\n            const filteredRow = row.filter((cell)=>cell !== 0);\n            const newRow = [];\n            let merged = false;\n            for(let i = 0; i < filteredRow.length; i++)if (!merged && filteredRow[i] === filteredRow[i + 1]) {\n                const mergedValue = filteredRow[i] * 2;\n                newRow.push(mergedValue);\n                this.score += mergedValue;\n                i++;\n                merged = true;\n                canMove = true;\n            } else {\n                newRow.push(filteredRow[i]);\n                merged = false;\n            }\n            while(newRow.length < row.length)newRow.push(0);\n            if (!canMove) canMove = !row.every((cell, index)=>cell === newRow[index]);\n            return newRow;\n        });\n        if (canMove) {\n            this.state = newState;\n            this.addNumbers();\n            this.setState();\n            this.checkStatus();\n        }\n        return canMove;\n    }\n    moveRight() {\n        if (this.getStatus() !== $a5fd07fa01589658$var$Game.STATUS.playing) return;\n        let canMove = false;\n        const newState = this.state.map((row)=>{\n            const filteredRow = row.filter((cell)=>cell !== 0);\n            const newRow = [];\n            for(let i = filteredRow.length - 1; i >= 0; i--)if (filteredRow[i] === filteredRow[i - 1]) {\n                const mergedValue = filteredRow[i] * 2;\n                newRow.unshift(mergedValue);\n                this.score += mergedValue;\n                i--;\n                canMove = true;\n            } else newRow.unshift(filteredRow[i]);\n            while(newRow.length < row.length)newRow.unshift(0);\n            if (!canMove && !row.every((cell, index)=>cell === newRow[index])) canMove = true;\n            return newRow;\n        });\n        if (canMove) {\n            this.state = newState;\n            this.addNumbers();\n            this.setState();\n            this.checkStatus();\n        }\n        return canMove;\n    }\n    moveUp() {\n        if (this.getStatus() !== $a5fd07fa01589658$var$Game.STATUS.playing) return;\n        let canMove = false;\n        const newState = this.state.map((row)=>[\n                ...row\n            ]);\n        for(let c = 0; c < this.state[0].length; c++){\n            const filteredColumn = [];\n            for(let r = 0; r < this.state.length; r++)if (this.state[r][c] !== 0) filteredColumn.push(this.state[r][c]);\n            const newColumn = [];\n            for(let i = 0; i < filteredColumn.length; i++)if (filteredColumn[i] === filteredColumn[i + 1]) {\n                const mergedValue = filteredColumn[i] * 2;\n                newColumn.push(mergedValue);\n                this.score += mergedValue;\n                i++;\n                canMove = true;\n            } else newColumn.push(filteredColumn[i]);\n            while(newColumn.length < this.state.length)newColumn.push(0);\n            for(let r = 0; r < this.state.length; r++)if (newState[r][c] !== newColumn[r]) {\n                newState[r][c] = newColumn[r];\n                canMove = true;\n            }\n        }\n        if (canMove) {\n            this.state = newState;\n            this.addNumbers();\n            this.setState();\n            this.checkStatus();\n        }\n        return canMove;\n    }\n    moveDown() {\n        if (this.getStatus() !== $a5fd07fa01589658$var$Game.STATUS.playing) return;\n        let canMove = false;\n        const newState = this.state.map((row)=>[\n                ...row\n            ]);\n        for(let c = 0; c < this.state[0].length; c++){\n            const filteredColumn = [];\n            for(let r = this.state.length - 1; r >= 0; r--)if (this.state[r][c] !== 0) filteredColumn.push(this.state[r][c]);\n            const newColumn = [];\n            for(let i = 0; i < filteredColumn.length; i++)if (filteredColumn[i] === filteredColumn[i + 1]) {\n                const mergedValue = filteredColumn[i] * 2;\n                newColumn.unshift(mergedValue);\n                this.score += mergedValue;\n                i++;\n                canMove = true;\n            } else newColumn.unshift(filteredColumn[i]);\n            while(newColumn.length < this.state.length)newColumn.unshift(0);\n            for(let r = 0; r < this.state.length; r++)if (newState[r][c] !== newColumn[r]) {\n                newState[r][c] = newColumn[r];\n                canMove = true;\n            }\n        }\n        if (canMove) {\n            this.state = newState;\n            this.addNumbers();\n            this.setState();\n            this.checkStatus();\n        }\n        return canMove;\n    }\n    getScore() {\n        return this.score;\n    }\n    /**\n   * @returns {number[][]}\n   */ getState() {\n        return this.state;\n    }\n    getStatus() {\n        return this.status;\n    }\n    /**\n   * Starts the game.\n   */ start() {\n        this.status = $a5fd07fa01589658$var$Game.STATUS.playing;\n        this.state = this.initialState.map((row)=>[\n                ...row\n            ]);\n        this.addNumbers();\n        this.addNumbers();\n        this.setState();\n    }\n    /**\n   * Resets the game.\n   */ restart() {\n        this.score = 0;\n        this.status = $a5fd07fa01589658$var$Game.STATUS.idle;\n        this.state = this.initialState.map((row)=>[\n                ...row\n            ]);\n        this.setState();\n    }\n    getRandomCell() {\n        return Math.random() < 0.9 ? 2 : 4;\n    }\n    addNumbers() {\n        const emptyCells = [];\n        for(let rows = 0; rows < this.state.length; rows++){\n            for(let cells = 0; cells < this.state[rows].length; cells++)if (this.state[rows][cells] === 0) emptyCells.push({\n                r: rows,\n                c: cells\n            });\n        }\n        const randomIndex = Math.floor(Math.random() * emptyCells.length);\n        const { r: r, c: c } = emptyCells[randomIndex];\n        const newState = this.state.map((row)=>[\n                ...row\n            ]);\n        newState[r][c] = this.getRandomCell();\n        this.state = newState;\n    }\n    setState() {\n        const cells = document.querySelectorAll(\".field-cell\");\n        const stateValues = this.state.flat();\n        if (cells.length === 0) return;\n        for(let i = 0; i < stateValues.length; i++){\n            const currentCell = cells[i];\n            const currentValue = stateValues[i];\n            if (!currentCell) continue;\n            currentCell.className = \"field-cell\";\n            if (currentValue > 0) {\n                currentCell.textContent = currentValue;\n                currentCell.classList.add(`field-cell--${currentValue}`);\n            } else currentCell.textContent = \"\";\n        }\n    }\n    checkStatus() {\n        let canMove = false;\n        let canMerge = false;\n        for(let i = 0; i < this.state.length; i++){\n            for(let j = 0; j < this.state[i].length; j++)if (this.state[i][j] === 2048) {\n                this.status = $a5fd07fa01589658$var$Game.STATUS.win;\n                return;\n            }\n        }\n        for(let i = 0; i < this.state.length; i++){\n            for(let j = 0; j < this.state[i].length - 1; j++)if (this.state[i][j] === this.state[i][j + 1]) {\n                canMerge = true;\n                break;\n            }\n            if (canMerge) break;\n        }\n        if (!canMerge) for(let i = 0; i < this.state.length - 1; i++){\n            for(let j = 0; j < this.state[i].length; j++)if (this.state[i][j] === this.state[i + 1][j]) {\n                canMerge = true;\n                break;\n            }\n            if (canMerge) break;\n        }\n        for(let i = 0; i < this.state.length; i++){\n            for(let j = 0; j < this.state[i].length; j++)if (this.state[i][j] === 0) {\n                canMove = true;\n                break;\n            }\n            if (canMove) break;\n        }\n        if (!canMove && !canMerge) this.status = $a5fd07fa01589658$var$Game.STATUS.lose;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$buttonStart = document.querySelector(\".button\");\nconst $09e991522ca7e64e$var$messageStart = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$messageLose = document.querySelector(\".message-lose\");\nconst $09e991522ca7e64e$var$messageWin = document.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$score = document.querySelector(\".game-score\");\nfunction $09e991522ca7e64e$var$updateScore() {\n    $09e991522ca7e64e$var$score.textContent = $09e991522ca7e64e$var$game.score;\n}\n$09e991522ca7e64e$var$buttonStart.addEventListener(\"click\", $09e991522ca7e64e$var$startGame);\nfunction $09e991522ca7e64e$var$startGame() {\n    $09e991522ca7e64e$var$buttonStart.classList.toggle(\"restart\");\n    $09e991522ca7e64e$var$buttonStart.classList.toggle(\"start\");\n    $09e991522ca7e64e$var$messageStart.classList.toggle(\"hidden\");\n    $09e991522ca7e64e$var$messageLose.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$messageWin.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$score.textContent = 0;\n    if ($09e991522ca7e64e$var$buttonStart.className.includes(\"start\")) {\n        $09e991522ca7e64e$var$buttonStart.textContent = \"Start\";\n        $09e991522ca7e64e$var$game.restart();\n    }\n    if ($09e991522ca7e64e$var$buttonStart.className.includes(\"restart\")) {\n        $09e991522ca7e64e$var$buttonStart.textContent = \"Restart\";\n        $09e991522ca7e64e$var$game.start();\n    }\n    document.addEventListener(\"keydown\", $09e991522ca7e64e$var$arrowMove);\n}\nconst $09e991522ca7e64e$var$deleteMove = ()=>document.removeEventListener(\"keydown\", $09e991522ca7e64e$var$arrowMove);\nfunction $09e991522ca7e64e$var$arrowMove(action) {\n    if ($09e991522ca7e64e$var$game.getStatus() === $a5fd07fa01589658$exports.STATUS.playing) {\n        let canMove = false;\n        switch(action.key){\n            case \"ArrowLeft\":\n                canMove = $09e991522ca7e64e$var$game.moveLeft();\n                break;\n            case \"ArrowRight\":\n                canMove = $09e991522ca7e64e$var$game.moveRight();\n                break;\n            case \"ArrowUp\":\n                canMove = $09e991522ca7e64e$var$game.moveUp();\n                break;\n            case \"ArrowDown\":\n                canMove = $09e991522ca7e64e$var$game.moveDown();\n                break;\n            default:\n                break;\n        }\n        if (canMove) $09e991522ca7e64e$var$updateScore();\n    }\n    if ($09e991522ca7e64e$var$game.getStatus() === $a5fd07fa01589658$exports.STATUS.lose) {\n        $09e991522ca7e64e$var$messageLose.classList.remove(\"hidden\");\n        $09e991522ca7e64e$var$deleteMove();\n    }\n    if ($09e991522ca7e64e$var$game.getStatus() === $a5fd07fa01589658$exports.STATUS.win) {\n        $09e991522ca7e64e$var$messageWin.classList.remove(\"hidden\");\n        $09e991522ca7e64e$var$deleteMove();\n    }\n    action.preventDefault();\n}\ndocument.addEventListener(\"keydown\", $09e991522ca7e64e$var$arrowMove);\n\n\n//# sourceMappingURL=index.d9f05580.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst buttonStart = document.querySelector('.button');\nconst messageStart = document.querySelector('.message-start');\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\nconst score = document.querySelector('.game-score');\n\nfunction updateScore() {\n  score.textContent = game.score;\n}\n\nbuttonStart.addEventListener('click', startGame);\n\nfunction startGame() {\n  buttonStart.classList.toggle('restart');\n  buttonStart.classList.toggle('start');\n  messageStart.classList.toggle('hidden');\n  messageLose.classList.add('hidden');\n  messageWin.classList.add('hidden');\n  score.textContent = 0;\n\n  if (buttonStart.className.includes('start')) {\n    buttonStart.textContent = 'Start';\n\n    game.restart();\n  }\n\n  if (buttonStart.className.includes('restart')) {\n    buttonStart.textContent = 'Restart';\n\n    game.start();\n  }\n\n  document.addEventListener('keydown', arrowMove);\n}\n\nconst deleteMove = () => document.removeEventListener('keydown', arrowMove);\n\nfunction arrowMove(action) {\n  if (game.getStatus() === Game.STATUS.playing) {\n    let canMove = false;\n\n    switch (action.key) {\n      case 'ArrowLeft':\n        canMove = game.moveLeft();\n        break;\n      case 'ArrowRight':\n        canMove = game.moveRight();\n        break;\n      case 'ArrowUp':\n        canMove = game.moveUp();\n        break;\n      case 'ArrowDown':\n        canMove = game.moveDown();\n        break;\n      default:\n        break;\n    }\n\n    if (canMove) {\n      updateScore();\n    }\n  }\n\n  if (game.getStatus() === Game.STATUS.lose) {\n    messageLose.classList.remove('hidden');\n\n    deleteMove();\n  }\n\n  if (game.getStatus() === Game.STATUS.win) {\n    messageWin.classList.remove('hidden');\n\n    deleteMove();\n  }\n\n  action.preventDefault();\n}\n\ndocument.addEventListener('keydown', arrowMove);\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  static STATUS = {\n    idle: 'idle',\n    playing: 'playing',\n    win: 'win',\n    lose: 'lose',\n  };\n\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.score = 0;\n    this.status = Game.STATUS;\n    this.initialState = initialState;\n    this.state = initialState.map((row) => [...row]);\n  }\n\n  moveLeft() {\n    if (this.getStatus() !== Game.STATUS.playing) {\n      return;\n    }\n\n    let canMove = false;\n\n    const newState = this.state.map((row) => {\n      const filteredRow = row.filter((cell) => cell !== 0);\n      const newRow = [];\n      let merged = false;\n\n      for (let i = 0; i < filteredRow.length; i++) {\n        if (!merged && filteredRow[i] === filteredRow[i + 1]) {\n          const mergedValue = filteredRow[i] * 2;\n\n          newRow.push(mergedValue);\n          this.score += mergedValue;\n          i++;\n          merged = true;\n          canMove = true;\n        } else {\n          newRow.push(filteredRow[i]);\n          merged = false;\n        }\n      }\n\n      while (newRow.length < row.length) {\n        newRow.push(0);\n      }\n\n      if (!canMove) {\n        canMove = !row.every((cell, index) => cell === newRow[index]);\n      }\n\n      return newRow;\n    });\n\n    if (canMove) {\n      this.state = newState;\n      this.addNumbers();\n      this.setState();\n      this.checkStatus();\n    }\n\n    return canMove;\n  }\n\n  moveRight() {\n    if (this.getStatus() !== Game.STATUS.playing) {\n      return;\n    }\n\n    let canMove = false;\n    const newState = this.state.map((row) => {\n      const filteredRow = row.filter((cell) => cell !== 0);\n      const newRow = [];\n\n      for (let i = filteredRow.length - 1; i >= 0; i--) {\n        if (filteredRow[i] === filteredRow[i - 1]) {\n          const mergedValue = filteredRow[i] * 2;\n\n          newRow.unshift(mergedValue);\n          this.score += mergedValue;\n          i--;\n          canMove = true;\n        } else {\n          newRow.unshift(filteredRow[i]);\n        }\n      }\n\n      while (newRow.length < row.length) {\n        newRow.unshift(0);\n      }\n\n      if (!canMove && !row.every((cell, index) => cell === newRow[index])) {\n        canMove = true;\n      }\n\n      return newRow;\n    });\n\n    if (canMove) {\n      this.state = newState;\n      this.addNumbers();\n      this.setState();\n      this.checkStatus();\n    }\n\n    return canMove;\n  }\n\n  moveUp() {\n    if (this.getStatus() !== Game.STATUS.playing) {\n      return;\n    }\n\n    let canMove = false;\n    const newState = this.state.map((row) => [...row]);\n\n    for (let c = 0; c < this.state[0].length; c++) {\n      const filteredColumn = [];\n\n      for (let r = 0; r < this.state.length; r++) {\n        if (this.state[r][c] !== 0) {\n          filteredColumn.push(this.state[r][c]);\n        }\n      }\n\n      const newColumn = [];\n\n      for (let i = 0; i < filteredColumn.length; i++) {\n        if (filteredColumn[i] === filteredColumn[i + 1]) {\n          const mergedValue = filteredColumn[i] * 2;\n\n          newColumn.push(mergedValue);\n          this.score += mergedValue;\n          i++;\n          canMove = true;\n        } else {\n          newColumn.push(filteredColumn[i]);\n        }\n      }\n\n      while (newColumn.length < this.state.length) {\n        newColumn.push(0);\n      }\n\n      for (let r = 0; r < this.state.length; r++) {\n        if (newState[r][c] !== newColumn[r]) {\n          newState[r][c] = newColumn[r];\n          canMove = true;\n        }\n      }\n    }\n\n    if (canMove) {\n      this.state = newState;\n      this.addNumbers();\n      this.setState();\n      this.checkStatus();\n    }\n\n    return canMove;\n  }\n\n  moveDown() {\n    if (this.getStatus() !== Game.STATUS.playing) {\n      return;\n    }\n\n    let canMove = false;\n    const newState = this.state.map((row) => [...row]);\n\n    for (let c = 0; c < this.state[0].length; c++) {\n      const filteredColumn = [];\n\n      for (let r = this.state.length - 1; r >= 0; r--) {\n        if (this.state[r][c] !== 0) {\n          filteredColumn.push(this.state[r][c]);\n        }\n      }\n\n      const newColumn = [];\n\n      for (let i = 0; i < filteredColumn.length; i++) {\n        if (filteredColumn[i] === filteredColumn[i + 1]) {\n          const mergedValue = filteredColumn[i] * 2;\n\n          newColumn.unshift(mergedValue);\n          this.score += mergedValue;\n          i++;\n          canMove = true;\n        } else {\n          newColumn.unshift(filteredColumn[i]);\n        }\n      }\n\n      while (newColumn.length < this.state.length) {\n        newColumn.unshift(0);\n      }\n\n      for (let r = 0; r < this.state.length; r++) {\n        if (newState[r][c] !== newColumn[r]) {\n          newState[r][c] = newColumn[r];\n          canMove = true;\n        }\n      }\n    }\n\n    if (canMove) {\n      this.state = newState;\n      this.addNumbers();\n      this.setState();\n      this.checkStatus();\n    }\n\n    return canMove;\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.state;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.status = Game.STATUS.playing;\n    this.state = this.initialState.map((row) => [...row]);\n\n    this.addNumbers();\n    this.addNumbers();\n    this.setState();\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.score = 0;\n    this.status = Game.STATUS.idle;\n    this.state = this.initialState.map((row) => [...row]);\n\n    this.setState();\n  }\n\n  getRandomCell() {\n    return Math.random() < 0.9 ? 2 : 4;\n  }\n\n  addNumbers() {\n    const emptyCells = [];\n\n    for (let rows = 0; rows < this.state.length; rows++) {\n      for (let cells = 0; cells < this.state[rows].length; cells++) {\n        if (this.state[rows][cells] === 0) {\n          emptyCells.push({ r: rows, c: cells });\n        }\n      }\n    }\n\n    const randomIndex = Math.floor(Math.random() * emptyCells.length);\n    const { r, c } = emptyCells[randomIndex];\n\n    const newState = this.state.map((row) => [...row]);\n\n    newState[r][c] = this.getRandomCell();\n\n    this.state = newState;\n  }\n\n  setState() {\n    const cells = document.querySelectorAll('.field-cell');\n    const stateValues = this.state.flat();\n\n    if (cells.length === 0) {\n      return;\n    }\n\n    for (let i = 0; i < stateValues.length; i++) {\n      const currentCell = cells[i];\n      const currentValue = stateValues[i];\n\n      if (!currentCell) {\n        continue;\n      }\n\n      currentCell.className = 'field-cell';\n\n      if (currentValue > 0) {\n        currentCell.textContent = currentValue;\n        currentCell.classList.add(`field-cell--${currentValue}`);\n      } else {\n        currentCell.textContent = '';\n      }\n    }\n  }\n\n  checkStatus() {\n    let canMove = false;\n    let canMerge = false;\n\n    for (let i = 0; i < this.state.length; i++) {\n      for (let j = 0; j < this.state[i].length; j++) {\n        if (this.state[i][j] === 2048) {\n          this.status = Game.STATUS.win;\n\n          return;\n        }\n      }\n    }\n\n    for (let i = 0; i < this.state.length; i++) {\n      for (let j = 0; j < this.state[i].length - 1; j++) {\n        if (this.state[i][j] === this.state[i][j + 1]) {\n          canMerge = true;\n          break;\n        }\n      }\n\n      if (canMerge) {\n        break;\n      }\n    }\n\n    if (!canMerge) {\n      for (let i = 0; i < this.state.length - 1; i++) {\n        for (let j = 0; j < this.state[i].length; j++) {\n          if (this.state[i][j] === this.state[i + 1][j]) {\n            canMerge = true;\n            break;\n          }\n        }\n\n        if (canMerge) {\n          break;\n        }\n      }\n    }\n\n    for (let i = 0; i < this.state.length; i++) {\n      for (let j = 0; j < this.state[i].length; j++) {\n        if (this.state[i][j] === 0) {\n          canMove = true;\n          break;\n        }\n      }\n\n      if (canMove) {\n        break;\n      }\n    }\n\n    if (!canMove && !canMerge) {\n      this.status = Game.STATUS.lose;\n    }\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$a5fd07fa01589658$exports","$a5fd07fa01589658$var$Game","STATUS","idle","playing","win","lose","constructor","initialState","score","status","state","map","row","moveLeft","getStatus","canMove","newState","filteredRow","filter","cell","newRow","merged","i","length","push","mergedValue","every","index","addNumbers","setState","checkStatus","moveRight","unshift","moveUp","c","filteredColumn","r","newColumn","moveDown","getScore","getState","start","restart","getRandomCell","Math","random","emptyCells","rows","cells","randomIndex","floor","document","querySelectorAll","stateValues","flat","currentCell","currentValue","className","textContent","classList","add","canMerge","j","$09e991522ca7e64e$var$game","$09e991522ca7e64e$var$buttonStart","querySelector","$09e991522ca7e64e$var$messageStart","$09e991522ca7e64e$var$messageLose","$09e991522ca7e64e$var$messageWin","$09e991522ca7e64e$var$score","addEventListener","toggle","includes","$09e991522ca7e64e$var$arrowMove","$09e991522ca7e64e$var$deleteMove","removeEventListener","action","key","remove","preventDefault"],"version":3,"file":"index.d9f05580.js.map"}